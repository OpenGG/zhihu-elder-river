// https://github.com/tj/co
// 4.6.0
const co=(()=>{function c(a){const b=this;const r=p.call(arguments,1);return new Promise((c, h)=>{function f(b){let d;try{d=a.next(b)}catch(l){return h(l)}g(d);return null}function e(b){let d;try{d=a["throw"](b)}catch(l){return h(l)}g(d)}function g(a){if(a.done)return c(a.value);const d=m.call(b,a.value);return d&&n(d)?d.then(f,e):e(new TypeError(`You may only yield a function, promise, generator, array, or object, but the following object was passed: "${String(a.value)}"`))}"function"===typeof a&&(a=a.apply(b,r));if(!a||"function"!==typeof a.next)return c(a);f()})}function m(a){if(!a||n(a))return a;let b;b=(b=a.constructor)?"GeneratorFunction"===b.name||"GeneratorFunction"===b.displayName?!0:q(b.prototype):!1;return b||q(a)?c.call(this,a):"function"==typeof a?t.call(this,a):Array.isArray(a)?Promise.all(a.map(m,this)):Object==a.constructor?u.call(this,a):a}function t(a){const b=this;return new Promise((c, k) => {a.call(b,function(a,b){if(a)return k(a);2<arguments.length&&(b=p.call(arguments,1));c(b)})})}function u(a){function b(a,b){c[b]=void 0;h.push(a.then(a=>{c[b]=a}))}for(var c=new a.constructor,k=Object.keys(a),h=[],f=0;f<k.length;f++){const e=k[f];const g=m.call(this,a[e]);g&&n(g)?b(g,e):c[e]=a[e]}return Promise.all(h).then(()=>c)}function n(a){return"function"==typeof a.then}function q(a){return"function"==typeof a.next&&"function"==typeof a["throw"]}var p=Array.prototype.slice;c["default"]=c.co=c;const w=a=>{function b(){return c.call(this,a.apply(this,arguments))}b.__generatorFunction__=a;return b};c.wrap=w;return c})();
